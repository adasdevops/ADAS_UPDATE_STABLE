name: Publish Docker images
# on:
#   release:
#     types: [published]
on:
  push:
    branches:
      - 'main'
      - 'develop'

jobs:
#   Unit_testing:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Run unit tests
#         env:
#           HOST_COVERAGE_DATA_DIR: ${{ github.workspace }}
#           CONTAINER_COVERAGE_DATA_DIR: '/coverage_data'
#         run: |
#           docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.ci.yml run cvat_ci /bin/bash -c 'coverage run -a manage.py test cvat/apps utils/cli'
#           docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.ci.yml run cvat_ci /bin/bash -c 'cd cvat-data && npm ci && cd ../cvat-core && npm ci && npm run test'
#   E2E_testing:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-node@v2
#         with:
#             node-version: '16.x'
#       - name: Run end-to-end tests
#         env:
#           DJANGO_SU_NAME: 'admin'
#           DJANGO_SU_EMAIL: 'admin@localhost.company'
#           DJANGO_SU_PASSWORD: '12qwaszx'
#           API_ABOUT_PAGE: "localhost:8080/api/v1/server/about"
#         run: |
#           docker-compose -f docker-compose.yml -f docker-compose.dev.yml build
#           docker-compose -f docker-compose.yml -f docker-compose.dev.yml -f components/serverless/docker-compose.serverless.yml -f tests/docker-compose.file_share.yml up -d
#           /bin/bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${API_ABOUT_PAGE})" != "401" ]]; do sleep 5; done'
#           docker exec -i cvat /bin/bash -c "echo \"from django.contrib.auth.models import User; User.objects.create_superuser('${DJANGO_SU_NAME}', '${DJANGO_SU_EMAIL}', '${DJANGO_SU_PASSWORD}')\" | python3 ~/manage.py shell"
#           cd ./tests
#           npm ci
#           npm run cypress:run:chrome
#           npm run cypress:run:chrome:canvas3d
#       - name: Uploading cypress screenshots as an artifact
#         if: failure()
#         uses: actions/upload-artifact@v2
#         with:
#           name: cypress_screenshots
#           path: ${{ github.workspace }}/tests/cypress/screenshots

  deployment:
    runs-on: ubuntu-latest
#     needs: [Unit_testing, E2E_testing]
    steps:
  
          
#       - name: 'Login via Azure CLI'
#         uses: azure/login@v1
#         with:
#             creds: ${{ secrets.AZURE_CREDENTIALS }}
          
#       - name: Deploy to Azure Container Instances
#         uses: 'azure/aci-deploy@v1'
#         with:
#             resource-group: ${{ secrets.RESOURCE_GROUP }}
#             dns-name-label: ${{ secrets.RESOURCE_GROUP }}1
#             image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/cvat_server:1
#             ports: 8080
#             environment-variables: CVAT_POSTGRES_HOST=DB_HOST CVAT_REDIS_HOST=REDIS_HOST
#             registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
#             registry-username: ${{ secrets.REGISTRY_USERNAME }}
#             registry-password: ${{ secrets.REGISTRY_PASSWORD }}
#             name: pmvmserver
#             location: 'East US' 

            
#       - name: 'Deploy to Azure Container Instances'
#         uses: 'azure/aci-deploy@v1'
#         with:
#             resource-group: ${{ secrets.RESOURCE_GROUP }}
#             dns-name-label: ${{ secrets.RESOURCE_GROUP }}2
#             image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/cvat_ui:1
#             ports: 80
#             registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
#             registry-username: ${{ secrets.REGISTRY_USERNAME }}
#             registry-password: ${{ secrets.REGISTRY_PASSWORD }}
#             name: pmvmui
#             location: 'East US' 
 
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            resource-group: ${{ secrets.RESOURCE_GROUP }}
            dns-name-label: ${{ secrets.RESOURCE_GROUP }}1
            registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            registry-username: ${{ secrets.REGISTRY_USERNAME }}
            registry-password: ${{ secrets.REGISTRY_PASSWORD }}
            name: pmvmserver
            location: 'East US'
      - run: |
          docker-compose -f docker-compose.dep.yml up          
